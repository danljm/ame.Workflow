@{
    ViewBag.Title = "SwimlaneChart";
}
@model Ame.WorkflowHTML5.Models.Chart

<link href="@Url.Content("~/Content/demo-all.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/perimeterAnchorsDemo.css")" rel="stylesheet" type="text/css" />
<h2>Swimlane Map</h2>
<div id="Success" class='success alert'>Action Successful</div>   

<div id="chartOptions">
    <div class="field"><input id="chartName" class="input" type="text" placeholder="New Swimlane Map"></div>
    <div class='medium metro rounded btn primary'><input type='button' value='New' onclick='Clear()'></div>
    <div class='medium metro rounded btn primary'><input type='button' value='Save' onclick='Save("SwimlaneChart")'></div>
    <div class='medium metro rounded btn danger'><input type='button' value='Delete Chart' onclick='Delete()'></div>
    <div class='medium metro rounded btn primary'><input type='button' value='Add Swimlane' onclick='AddSwimlane("")'></div>
   
</div>

<div class="field"><textarea id="chartDescription" class="input textarea" placeholder="Enter Process Description" rows="4"></textarea></div>


<div id="pallette-menu">
    <ul>
        <h4 style="text-align: center">Drawing Palette</h4>
        <div class='medium metro rounded btn primary' style="margin-left: 60px" ><input id='toggleButton' type='button' value='Connect' onclick='ToggleMode()'></div>

        <li class="pallette-shape"><div class="shape pallette roundedRectangle">Action</div></li>
        <li class="pallette-shape"><div class="shape pallette start">Start</div></li>
        <li class="pallette-shape"><div class="shape pallette stop">Stop</div></li>
        <li class="pallette-shape"><div class="shape pallette oval"></div></li>
        <li class="pallette-shape"><div class="shape pallette diamond">Decision</div></li>
        <li class="pallette-shape"><div class="shape pallette arrow"></div></li>
        <li class="pallette-shape"><div class="shape pallette triangle"></div></li>
        <li class="pallette-shape"><div class="shape pallette component">Connection Label</div></li>
        <li class="pallette-shape"><div class="shape pallette stickyNote">Note</div></li>
    </ul>
</div>

<div id="pallette-container">
    <div id="pallette-draw">
        <ul class="swimlane-wrapper"></ul>

        <div id="line1" class="verticalLine" style="left: 14%"></div>
        <div id="line2" class="verticalLine" style="left: 28%"></div>
        <div id="line3" class="verticalLine" style="left: 42%"></div>
        <div id="line4" class="verticalLine" style="left: 56%"></div>
        <div id="line5" class="verticalLine" style="left: 70%"></div>
        <div id="line6" class="verticalLine" style="left: 84%"></div>
        <div id="line7" class="verticalLine" style="left: 98%"></div>

        <div id="render"></div>
    </div>
</div>

<div id="inputWindow">
    <div class="field"><input id="labelSet" class="input" type="text" placeholder="Enter Label"></div>
    <div class='medium metro rounded btn primary'><input type='button' value='Ok' onclick='handleUserInput(false)'></div>
    <div class='medium metro rounded btn primary'><input type='button' value='Remove' onclick='handleUserInput(true)'></div>
</div>

<script type="text/javascript">

    var handleUserInput = function (option) {

        if (option) {
            $('.edit').remove();
        } else {
            var userinput = ($("#labelSet").val());
            $('.edit').text(userinput);
            $('.edit').removeClass('edit');
        }
        win.close();
    }

    var win = $("#inputWindow")
        .kendoWindow({
            actions: ["Close"],
            minWidth: 300,
            modal: true,
            resizable: true,
            title: "Modify Element",
            visible: false
        })
        .data("kendoWindow")
        .center();

    function LoadChart() {
        var chartName = '@Model.ChartName';
        var chartDescription = '@Model.ChartDescription';

        $('#chartName').val(chartName);
        $('#chartDescription').val(chartDescription);

        Load('@Model.ChartData');
    }

    function AddSwimlane(text) {
        console.log('adding swimlane');

        if (text.length == 0) { text = 'New Swimlane'; }
        $(".swimlane-wrapper").append('<li class="swimlane"><div class="li-text"><h5 class="li-head">' + text + '</h5></div></li>');

        $(".li-head").click(function () {
            $(this).addClass('edit');
            win.open();
        });

        $(".swimlane").dblclick(function () {
            $(this).remove();
        });

        var newHeight = $(".verticalLine").height() + 180;

        console.log(newHeight);

        $(".verticalLine").height(newHeight);
    }

    $(document).ready(function () {

        $('#Success').hide();

        $(".shape").not(".pallette").click(function () {
            $(this).addClass('edit');
            win.open();
        });

        $(".li-head").click(function () {
            $(this).addClass('edit');
            win.open();
        });

        $(".shape").not(".pallette").dblclick(function () {
            $(this).remove();
        });

        $(".li-head").dblclick(function () {
            $(this).remove();
        });

        $(".pallette").draggable({
            containment: '#pallette-draw',
            helper: 'clone',
            stop: function (event, ui) {
                $(ui.helper).clone(true, false).removeClass('pallette ui-draggable-dragging jsPlumb_dragged').addClass('clone').appendTo($('#pallette-draw'));

                var clone = $('.clone');
                var pos = $(ui.helper).offset();
                clone.offset({ top: pos.top, left: pos.left });

                if (!clone.hasClass('stickyNote') || !clone.hasClass('component')) {
                    jsPlumb.makeTarget(clone, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous" });

                    jsPlumb.makeSource(clone, {
                        anchor: "Continuous",
                        connector: "Flowchart"
                    });
                }

                clone.draggable({
                    drag: function () {
                        jsPlumb.repaintEverything();
                    }
                });

                clone.click(function () {
                    $(this).addClass('edit');
                    win.open();
                });

                clone.removeClass('clone');
            }
        });

        $('li').droppable({ hoverClass: "ui-state-active" });

        $('.verticalLine').draggable({
            containment: '#pallette-draw',
            axis: "x"
        }).click(function () {
            $(this).remove();
        });

        LoadChart();
    });

      

</script>
<style>
    
    .verticalLine 
    {
    	position:absolute;
    	width: 0%;
        border-right: dashed #3085d6;
    }
    
    .swimlane-wrapper
    {
        float: left;
        width: 100%;
        margin: 0;
    }

    .swimlane
    {
        display: table;
        border-collapse: collapse;
        width: 100%;
        min-height: 180px;
        height: 180px;
        padding: 5px;
        background: #FFFFFF;
        border-bottom: solid 1px black;
        margin: 0;
    }
    
    .ui-state-active
    {
        background: #FEFFD6;
    }
    
    .inner
    {
        display: table-row;
        overflow: hidden;
    }
    .li-text
    {
        width: 180px;
        vertical-align: middle;
        background: #e1e1e1;
        
        transform: rotate(-90deg);
        -moz-transform: rotate(-90deg);
        -o-transform: rotate(-90deg);
        -webkit-transform: rotate(-90deg);
        -ms-transform: rotate(-90deg);
        -webkit-transform-origin: 88px 90px;
        -moz-transform-origin: 88px 90px;
        -ms-transform-origin: 88px 90px;
        -o-transform-origin: 88px 90px;
        
    }
    .li-head
    {
        margin: 0;
        padding: 5px 5px 5px 5px;
        text-align: center;
        font-weight: 800;
    }
    .li-sub
    {
        margin: 0;
    }
    
    
</style>
